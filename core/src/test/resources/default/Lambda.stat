80 columns                                                                     |
<<< resolveLocalDef
    def withDedicatedVar: Unit = {
      def doBuildInner = {
        buildInner({ tinner =>
            tinner match {
              case _ =>
                rhsSideEfs match {
                  case _ =>  cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
                }
              }
        })
      }
    }
>>>
def withDedicatedVar: Unit = {
  def doBuildInner = {
    buildInner({ tinner =>
      tinner match {
        case _ =>
          rhsSideEfs match {
            case _ => cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
          }
      }
    })
  }
}
<<< single line case #150 with newline before }
    val reads = paramSymbols.zip(apply.args).map { case (param, term) =>
      val assign = term match{
        case q"ammonite.repl.ScriptInit.arg($inner)" =>

          val newPrefix = q"ammonite.repl.ScriptInit.parseScriptArg"
          q"$newPrefix[${param.typeSignature}](${param.name.decoded}, $inner)"
        case x => x // This case should only be for default args, which we leave unchanged
      }
      assign
}
>>>
val reads = paramSymbols.zip(apply.args).map { case (param, term) =>
  val assign = term match {
    case q"ammonite.repl.ScriptInit.arg($inner)" =>
      val newPrefix = q"ammonite.repl.ScriptInit.parseScriptArg"
      q"$newPrefix[${param.typeSignature}](${param.name.decoded}, $inner)"
    case x =>
      x // This case should only be for default args, which we leave unchanged
  }
  assign
}
<<< single line case #150
val reads = paramSymbols.map { case (param, term) => param
}
>>>
val reads = paramSymbols.map { case (param, term) => param }
<<< akka Stats
{{ x match {
    case Stats ⇒
      val watchSet = watching.iterator.flatMap { case (wee, wers) ⇒ wers.map { wer ⇒ wee → wer } }.toSet[(ActorRef, ActorRef)]
      sender() ! Stats(
        watching = watchSet.size,
        watchingNodes = watchingNodes.size)(watchSet, watchingNodes.toSet)
        }}}
>>>
{
  {
    x match {
      case Stats ⇒
        val watchSet = watching.iterator.flatMap { case (wee, wers) ⇒
          wers.map { wer ⇒
            wee → wer
          }
        }.toSet[(ActorRef, ActorRef)]
        sender() ! Stats(
            watching = watchSet.size,
            watchingNodes = watchingNodes.size)(watchSet, watchingNodes.toSet)
    }
  }
}
<<< ONLY json extract

  def sparkEventFromJson(json: JValue): SparkListenerEvent = {
    val metricsUpdate = Utils.getFormattedClassName(SparkListenerExecutorMetricsUpdate)

    (json \ "Event").extract[String] match {
      case other => mapper
    }
  }

>>>
    x
